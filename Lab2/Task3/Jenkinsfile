def COLOR_MAP = [
    'SUCCESS' : "good",
    'FAILURE' : "danger",
]

pipeline {
    agent any
    tools {
        maven "MAVEN3"
        jdk "OracleJDK17"
    }

    stages {
        stage("Fetch code") {
            steps {
                git branch: 'docker', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }

        stage("Build") {
            steps {
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo 'Archiving artifacts now.'
                    archiveArtifacts artifacts: "**/*.war"
                }
            }
        }

        stage("Unit Test") {
            steps {
                sh 'mvn test'
            }
        }

        stage("Checkstyle Analysis") {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage("Sonar Analysis") {
            environment {
                scannerHome = tool 'sonar6.0'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    '''
                }
            }
        }

        // stage("Quality Gate") {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }

        // 

        stage("Build Docker Image") {
            steps {
                script {
                    dockerImage = docker.build("172.26.195.46:8082/repository/vpro-docker-app/vprofile-app:${env.BUILD_ID}", "./Docker-files/app/multistage/")
                }
            }
        }

        stage('Upload App Image') {
            steps{
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexuslogin', passwordVariable: 'PSW', usernameVariable: 'USER')]){
                        sh "echo ${PSW} | docker login -u ${USER} --password-stdin http://172.26.195.46:8082"
                        sh "docker push 172.26.195.46:8082/repository/vpro-docker-app/vprofile-app:${env.BUILD_ID}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#devops-cicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
